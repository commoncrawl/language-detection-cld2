/*
 * Copyright 2014-present Deezer.com, 2018- CommonCrawl.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.commoncrawl.langdetect.cld2;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;

/**
 * External hints from web page passed to CLD2, see <a href=
 * "https://github.com/CLD2Owners/cld2/blob/master/public/compact_lang_det.h#L119">compact_lang_det.h</a>:
 * <blockquote> Pass in hints whenever possible; doing so improves detection accuracy.
 * The set of passed-in hints are all information that is external to the text
 * itself.</blockquote>
 * 
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> ,
 * <a href="http://rococoa.dev.java.net/">Rococoa</a>, or
 * <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CLDHints extends Structure {

  /** "mi,en" boosts Maori and English */
  public String content_language_hint;

  /** "id" boosts Indonesian */
  public String tld_hint;

  /** SJS boosts Japanese */
  public int encoding_hint = Encoding.UNKNOWN_ENCODING.value();

  /** ITALIAN boosts it */
  public int language_hint = Language.UNKNOWN_LANGUAGE.value();

  protected static CLDHints NO_HINTS = new CLDHints(null, "",
  Encoding.UNKNOWN_ENCODING.value(), Language.UNKNOWN_LANGUAGE.value());

  private static final Pattern DOTPATTERN = Pattern.compile("\\.");


  public CLDHints() {
    super();
  }

  protected List<String> getFieldOrder() {
    return Arrays.asList("content_language_hint", "tld_hint", "encoding_hint",
        "language_hint");
  }

  public CLDHints(String contentLanguage, String topLevelDomain, int encoding,
      int language) {
    super();
    content_language_hint = contentLanguage;
    tld_hint = topLevelDomain;
    encoding_hint = encoding;
    language_hint = language;
  }

  public CLDHints(Pointer peer) {
    super(peer);
  }

  /**
   * @param contentLanguage
   *          <cite>intended to come from an HTTP header Content-Language:
   *          field</cite>, e.g. &quot;mi,en&quot; boosts Maori and English
   */
  public void setContentLanguageHint(String contentLanguage) {
    content_language_hint = contentLanguage;
  }

  /**
   * @param topLevelDomain
   *          top-level domain of the hostname of a URL
   */
  public void setTopLevelDomainHint(String topLevelDomain) {
    tld_hint = topLevelDomain;
  }

  /**
   * @param host
   *  host name to set top-level domain from
   */
  public void setTopLevelDomainHintFromHostName(String host) {
    if (host == null) {
      return;
    }
    String[] hostParts = DOTPATTERN.split(host);
    if (hostParts.length < 2) {
      return;
    }
    String topLevelDomain = hostParts[hostParts.length - 1];
    if (topLevelDomain.isEmpty()) {
      return;
    }
    topLevelDomain = topLevelDomain.toLowerCase(Locale.ROOT);
    char firstChar = topLevelDomain.charAt(0);
    if (firstChar >= 0x61 && firstChar <= 0x7a) {
      // an ASCII letter => host is not an IP address
      tld_hint = topLevelDomain;
    }
  }

  /**
   * @param url
   *          URL to set top-level domain from
   */
  public void setTopLevelDomainHint(URL url) {
    setTopLevelDomainHintFromHostName(url.getHost());
  }

  /**
   * @param uri
   *          URI to set top-level domain from
   */
  public void setTopLevelDomainHint(URI uri) {
    String host = uri.getHost();
    if (host == null) {
      // retry as URL, e.g., in case, the host name contains an underscore character
      try {
        host = uri.toURL().getHost();
      } catch (MalformedURLException e) {
      }
    }
    setTopLevelDomainHintFromHostName(host);
  }

  public void setEncodingHint(int encoding) {
    encoding_hint = encoding;
  }

  public void setEncodingHint(Charset charset) {
    encoding_hint = Encoding.convert(charset).value();
  }

  public void setLanguageHint(int language) {
    language_hint = language;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("Content-Language: ").append(content_language_hint).append('\n');
    sb.append("Top-level domain: ").append(tld_hint).append('\n');
    sb.append("Encoding: ").append(Encoding.get(encoding_hint)).append('\n');
    sb.append("Language: ").append(Cld2.getLanguageCode(language_hint));
    return sb.toString();
  }

}
